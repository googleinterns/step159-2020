package com.google.sps.servlets;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.SortDirection;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.gson.Gson;
import com.google.gson.Gson;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.UUID;


@WebServlet("/database-make")
public class databaseTest extends HttpServlet {

  private Key existingSchoolKey;
  private Key existingCourseKey;
  private Key existingProfessorKey;

  private Key newSchoolKey;
  private Key newCourseKey;
  private Key newProfessorKey;
  private Key newTermKey;


  @Override
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
      String hey = "hello";
  }

  @Override
  public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
    String schoolName = request.getParameter("school-name");
    String courseName = request.getParameter("course-name");
    String term = request.getParameter("term");
    String units = request.getParameter("units");
    String profName = request.getParameter("professor-name");
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();



    //sees if school exists if it does grabs key, else makes one
    Filter schoolFilter = new FilterPredicate("name", FilterOperator.EQUAL, schoolName);
    Query schoolQ = new Query("School").setFilter(schoolFilter);
    List<Entity> schoolQuery = datastore.prepare(schoolQ).asList(FetchOptions.Builder.withDefaults());

    if(schoolQuery.size() == 0){
        Entity newSchool = new Entity("School");
        newSchool.setProperty("school-name",schoolName);
        datastore.put(newSchool);
    } else {
        Entity existingSchool = schoolQuery.get(0);
        existingSchoolKey = existingSchool.getKey();
    }

    //new school so everything is new
    if(newSchoolKey != null){
        String newCourseKeyStr = "798575";
        newCourseKey = KeyFactory.stringToKey(newCourseKeyStr);

        String newProfessorKeyStr = "374699";
        newProfessorKey = KeyFactory.stringToKey(newProfessorKeyStr);

        Entity newCourse = new Entity("Course",newCourseKeyStr,newSchoolKey);
        newCourse.setProperty("course-name",courseName);
        newCourse.setProperty("Units", units);
        datastore.put(newCourse);

        Entity newTerm = new Entity("Term", 892748, newCourseKey);
        newTerm.setProperty("term",term);
        newTerm.setProperty("Professor", profName);
        datastore.put(newTerm);

        Entity newProfessor = new Entity("Professor",newProfessorKeyStr,newSchoolKey);
        newProfessor.setProperty("name", profName);
        newProfessor.setProperty("courses", Arrays.asList(newCourseKey));
        newProfessor.setProperty("course-list",Arrays.asList(Arrays.asList(courseName,term)));

    } else {

    //     //existing school so now we check if this is a new course
    //     Filter courseFilter = new FilterPredicate("course-name", FilterOperator.EQUAL, courseName);
    //     Query courseQ = new Query("Course").setAncestor(existingSchoolKey).setFilter(courseFilter);
    //     List<Entity> courseQuery = datastore.prepare(schoolQ).asList(FetchOptions.Builder.withDefaults());

    //     if(courseQuery.size() == 0){
    //         //new course
    //         Entity newCourse;
    //         String newCourseKeyStr = "798575";
    //         newCourseKey = KeyFactory.stringToKey(newCourseKeyStr);
    //         if(existingSchoolKey != null){
    //             newCourse = new Entity("Course", newCourseKeyStr, existingSchoolKey);
    //         } else {
    //             newCourse = new Entity("Course", newCourseKeyStr, newSchoolKey);
    //         }

    //         newCourse.setProperty("course-name",courseName);
    //         newCourse.setProperty("Units", units);
    //         datastore.put(newCourse);

    //         //there should never be duplicate terms so no need to check
    //         String newTermKeyStr = "892748";
    //         newTermKey = KeyFactory.stringToKey(newTermKeyStr);
    //         Entity newTerm = new Entity("Term", newTermKeyStr, newCourseKey);
    //         newTerm.setProperty("term",term);
    //         newTerm.setProperty("instructor",profName);
    //         datastore.put(newTerm);

    //         //professor are tied to terms so we should check them last
    //         Filter professorFilter = new FilterPredicate("professor-name", FilterOperator.EQUAL, profName);
    //         Query professorQ = new Query("Professor").setAncestor(existingSchoolKey).setFilter(professorFilter);
    //         List<Entity> professorQuery = datastore.prepare(professorQ).asList(FetchOptions.Builder.withDefaults());

    //         //this is a new professor
    //         if(professorQuery.size() == 0){
    //             Entity newProfessor;
    //             String newProfessorKeyStr = "374699";
    //             newProfessorKey = KeyFactory.stringToKey(newProfessorKeyStr);
    //             newProfessor = new Entity("Professor",newProfessorKeyStr,existingSchoolKey);
    //             newProfessor.setProperty("professor-name",profName);
    //             newProfessor.setProperty("school", schoolName);
    //             newProfessor.setProperty("teaches",newTermKeyStr);
    //         } else {
    //          System.out.println("OLD PROFESSOR");
    //         }
            

    //     } else {
    //         //no new course only new term
    //         Entity existingCourse = courseQuery.get(0);
    //         existingCourseKey = existingCourse.getKey();

    //         String newTermKeyStr = "892748";
    //         newTermKey = KeyFactory.stringToKey(newTermKeyStr);

    //         Entity newTerm = new Entity("Term",newTermKeyStr,existingCourseKey);
    //         newTerm.setProperty("term",term);
    //         newTerm.setProperty("instructor",profName);
    //         datastore.put(newTerm);

    //         //professor are tied to terms so we should check them last
    //         Filter professorFilter = new FilterPredicate("professor-name", FilterOperator.EQUAL, profName);
    //         Query professorQ = new Query("Professor").setAncestor(existingSchoolKey).setFilter(professorFilter);
    //         List<Entity> professorQuery = datastore.prepare(professorQ).asList(FetchOptions.Builder.withDefaults());

    //         //this is a new professor
    //         if(professorQuery.size() == 0){
    //             Entity newProfessor;
    //             String newProfessorKeyStr = "374699";
    //             newProfessorKey = KeyFactory.stringToKey(newProfessorKeyStr);
    //             newProfessor = new Entity("Professor",newProfessorKeyStr,existingSchoolKey);
    //             newProfessor.setProperty("professor-name",profName);
    //             newProfessor.setProperty("school", schoolName);
    //             newProfessor.setProperty("teaches",newTermKeyStr);
    //         } else {
    //          System.out.println("OLD PROFESSOR");
    //         }
    //     }
    // }
  }

  /**
   * @return the request parameter, or the default value if the parameter was not specified by the
   *     client
   */
  private String getParameter(HttpServletRequest request, String name, String defaultValue) {
    String value = request.getParameter(name);
    return value != null ? value : defaultValue;
  }
}